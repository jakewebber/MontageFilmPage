{"version":3,"sources":["../../Users/jwebber/montage/src/logo.svg","../../Users/jwebber/montage/src/FilmGrid.js","../../Users/jwebber/montage/src/App.js","../../Users/jwebber/montage/src/serviceWorker.js","../../Users/jwebber/montage/src/index.js"],"names":["module","exports","__webpack_require__","p","films","require","navOptions","all","toprated","new","alphabetical","genre","genres","FilmNavigation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","update","e","console","log","target","value","onUpdate","setState","fieldVal","state","clickedNav","clickedGenre","showGenreDropdown","bind","assertThisInitialized","closeGenreDropdown","filterFilms","updateFilmNav","filterGenre","updateGenreNav","event","_this2","preventDefault","document","addEventListener","_this3","removeEventListener","filter","updateFilter","updateFilterGenre","_this4","react_default","a","createElement","className","href","onClick","class","map","React","Component","FilmGrid","_this5","filmData","filterNav","selectedFilter","sort","b","id","imdbRating","year","title","film","includes","FilmGrid_FilmNavigation","renderImageContent","index","key","FilmGrid_FilmContainer","rating","posterURL","posterurl","storyline","FilmContainer","_this$props","i","src","MontageApp","action","method","type","name","placeholder","htmlFor","src_FilmGrid","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29eebeec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.6f7cd384.svg\";","import React from 'react';\nimport './App.css';\nimport './filmnav.css'\n\nimport filmsjson from './films';\n\nvar films = require('./films.json'); // normally this would be fetched from db\n/** Renders entire grid of film objects for display. */\nconst navOptions = {\n  all: 'All',\n  toprated: 'Top Rated',\n  new: 'New Arrivals',\n  alphabetical: 'Alphabetical',\n  genre: 'Genre',\n}\n\nconst genres = [\n  'Action',\n  'Adventure',\n  'Animation',\n  'Biography',\n  'Comedy',\n  'Drama',\n  'Fantasy',\n  'History',\n  'Musical',\n  'Romance',\n  'Thriller',\n  'Sci-Fi',\n  'Western',\n]\n\n/** Finishing  */\nclass FilmNavigation extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      clickedNav: navOptions.all,\n      clickedGenre: null,\n      showGenreDropdown: false,\n    }\n\n    this.showGenreDropdown = this.showGenreDropdown.bind(this);\n    this.closeGenreDropdown = this.closeGenreDropdown.bind(this);\n    this.filterFilms = this.updateFilmNav.bind(this);\n    this.filterGenre = this.updateGenreNav.bind(this);\n  }\n\n  showGenreDropdown(event){\n    event.preventDefault();\n    this.setState({ showGenreDropdown: true, clickedNav: navOptions.genre },  () => {\n      document.addEventListener('click', this.closeGenreDropdown);\n    });\n  }\n  closeGenreDropdown(event){\n    this.setState({ showGenreDropdown: false}, () => {\n      document.removeEventListener('click', this.closeGenreDropdown);\n    });\n  }\n\n  updateFilmNav(filter){\n      this.setState({ clickedNav: filter, clickedGenre: null });\n      this.props.updateFilter(filter);\n  }\n  updateGenreNav(genre){\n    this.setState({ clickedGenre: genre});\n    this.props.updateFilterGenre(genre);\n  }\n\n  update = (e) => {\n    console.log(e.target.value);\n    this.props.onUpdate(e.target.value);\n    this.setState({fieldVal: e.target.value});\n  };\n\n  render() {\n    return (\n      <nav className=\"film-nav\">\n        <ul>\n          <li className={this.state.clickedNav == navOptions.all ? 'active' : ''}>\n            <a href=\"#\" onClick={() => this.updateFilmNav(navOptions.all)}>{navOptions.all}</a>\n          </li>\n          <li className={this.state.clickedNav == navOptions.toprated ? 'active' : ''}>\n            <a href=\"#\" onClick={ () => this.updateFilmNav(navOptions.toprated)}>{navOptions.toprated}</a>\n          </li>\n          <li className={this.state.clickedNav == navOptions.new ? 'active' : ''}>\n            <a href=\"#\" onClick={ () => this.updateFilmNav(navOptions.new)}>{navOptions.new}</a>\n          </li>\n          <li className={this.state.clickedNav == navOptions.alphabetical ? 'active' : ''}>\n            <a href=\"#\" onClick={ () => this.updateFilmNav(navOptions.alphabetical)}>{navOptions.alphabetical}</a>\n          </li>\n          <li className={this.state.clickedNav == navOptions.genre ? 'active' : ''}>\n            <a href=\"#\" onClick={this.showGenreDropdown}>{navOptions.genre}  &#9660;</a>\n            { this.state.showGenreDropdown ? (\n              <ul class=\"nav-dropdown\">\n                  {\n                    genres.map((genre) => {\n                      return (\n                        <li className={this.state.clickedGenre == genre ? 'active' : ''}>\n                          <a href=\"#\" onClick={ () => this.updateGenreNav(genre)}>{genre}</a>\n                        </li>\n                      )\n                    }\n                    )\n                  }\n              </ul>\n            ) : ( null )\n            }\n          </li>\n            \n        </ul>\n    </nav>\n    );\n  }\n}\n\n\nclass FilmGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      filmData: films,\n      filter: navOptions.all,\n     };\n    this.filterGenre = this.filterGenre.bind(this);\n    this.filterNav = this.filterNav.bind(this);\n  }  \n\n  filterNav(selectedFilter){\n    this.setState({filter: selectedFilter});\n    switch(selectedFilter) {\n      case navOptions.all:\n        {\n          this.setState({ \n            filmData : films.sort(function(a, b){\n              if(a.id > b.id){\n                return 1;\n              }else if(a.id < b.id){\n                return -1;\n              }else{\n                return 0;\n              }\n            }) \n          });\n        }\n        break;\n      case navOptions.toprated:\n        {\n          this.setState({ \n            filmData : films.sort(function(a, b){\n              if(a.imdbRating < b.imdbRating){\n                return 1;\n              }else if(a.imdbRating > b.imdbRating){\n                return -1;\n              }else{\n                return 0;\n              }\n            }) \n          });\n        }\n        break;\n      case navOptions.new:\n          {\n            this.setState({ \n              filmData : films.sort(function(a, b){\n                if(a.year < b.year){\n                  return 1;\n                }else if(a.year > b.year){\n                  return -1;\n                }else{\n                  return 0;\n                }\n              }) \n            });\n          }\n          break;       \n      case navOptions.alphabetical:\n          {\n            this.setState({ \n              filmData : films.sort(function(a, b){\n                if(a.title > b.title){\n                  return 1;\n                }else if(a.title < b.title){\n                  return -1;\n                }else{\n                  return 0;\n                }\n              }) \n            });\n          }\n          break;\n    }\n\n  }\n\n  filterGenre(genre){\n    this.setState({filter: genre});\n    this.setState({ \n      filmData : films.filter(function(film){\n        return film.genres.includes(genre)\n      }) \n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <FilmNavigation updateFilter={this.filterNav} updateFilterGenre={this.filterGenre}/>\n      <div className=\"gallery-container\">\n        <h3>{this.state.filter} Independent Movies</h3>\n        <div className=\"gallery-grid\">\n          {this.state.filmData.map(this.renderImageContent)}\n        </div>\n      </div>\n      </div>\n\n    )\n  }\n\n  renderImageContent(film, index) {\n    return (\n      <div key={index} className=\"film-container\">\n        <FilmContainer \n        title={film.title} \n        rating={film.imdbRating} \n        year={film.year}  \n        genres={film.genres}\n        posterURL={film.posterurl} \n        storyline={film.storyline} \n        />\n      </div>\n    );\n  }\n\n}\n\n/** Renders a single film object to the grid.\n * props: id, title, rating, genres, year, posterURL, storyline */\nclass FilmContainer extends React.Component {\n    constructor(){\n      super();\n    }\n\n    render () {\n      const { title, rating, genres, year, posterURL, storyline } = this.props;\n      return(\n        <div className=\"film-tile\">\n          <div className=\"film-year\">{year}</div>\n          <div className=\"film-tag\">\n            <div className=\"film-title\">{title}</div>\n            <div className=\"film-genres\">\n              {genres.map((genre, i) => [ i > 0 && \", \", genre ])}\n            </div>\n            <div className=\"film-rating\">{rating}</div>\n          </div>\n          <div className=\"film-info-cover\">\n            <div className=\"film-info-text\">{storyline}</div>\n          </div>\n          <img className=\"film-img\" src={posterURL} />\n        </div>\n      );\n    }\n}\n\nexport default FilmGrid","import React from 'react';\nimport logo from './logo.svg';\nimport FilmGrid from './FilmGrid.js';\nimport './App.css';\n\nfunction MontageApp() {\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <span className=\"header-text\"><span className=\"start\">mon</span><span className=\"end\">tage.</span></span>\n        <nav className=\"main-nav\">\n          <ul>\n            <li><a>Home</a></li>\n            <li className=\"active\">\n              <div className=\"arrow\"></div>\n              <a>Watch Movies</a>\n            </li>\n            <li><a>Film Crew</a></li>\n          </ul>\n        </nav>\n        <div className=\"search-container\">\n          <form action=\"/search\" method=\"get\">\n            <input className=\"search expandright\" id=\"searchright\" type=\"search\" name=\"q\" placeholder=\"Search\"/>\n            <label className=\"button searchbutton\" htmlFor=\"searchright\"><span className=\"mglass\">&#9906;</span></label>\n          </form>\n        </div>\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n      </header>\n      <div className=\"film-grid\">\n        <FilmGrid/>\n      </div>\n    </div>\n  );\n}\n\nexport default MontageApp;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}